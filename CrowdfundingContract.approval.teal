#pragma version 10
#pragma typetrack false

// smart_contracts.funding.contract.CrowdfundingContract.__algopy_entrypoint_with_init() -> uint64:
main:
    intcblock 0 1
    bytecblock "raised_amount" "is_active" "contribution" "goal_amount" "deadline" "creator"
    // smart_contracts/funding/contract.py:12
    // class CrowdfundingContract(ARC4Contract):
    txn NumAppArgs
    bz main_after_if_else@10
    pushbytess 0x4f07afa6 0x1280da1a 0x885aa26a 0x23e629f7 0x623fb5b4 // method "create_campaign(uint64,uint64,string)void", method "contribute()void", method "withdraw_funds()void", method "refund()void", method "get_campaign_info()(uint64,uint64,uint64,address,uint64)"
    txna ApplicationArgs 0
    match main_create_campaign_route@5 main_contribute_route@6 main_withdraw_funds_route@7 main_refund_route@8 main_get_campaign_info_route@9

main_after_if_else@10:
    // smart_contracts/funding/contract.py:12
    // class CrowdfundingContract(ARC4Contract):
    intc_0 // 0
    return

main_get_campaign_info_route@9:
    // smart_contracts/funding/contract.py:72
    // @arc4.abimethod(readonly=True)
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub get_campaign_info
    pushbytes 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_refund_route@8:
    // smart_contracts/funding/contract.py:62
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub refund
    intc_1 // 1
    return

main_withdraw_funds_route@7:
    // smart_contracts/funding/contract.py:52
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub withdraw_funds
    intc_1 // 1
    return

main_contribute_route@6:
    // smart_contracts/funding/contract.py:42
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub contribute
    intc_1 // 1
    return

main_create_campaign_route@5:
    // smart_contracts/funding/contract.py:25
    // @arc4.abimethod(create="require")
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    !
    assert // can only call when creating
    // smart_contracts/funding/contract.py:12
    // class CrowdfundingContract(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    // smart_contracts/funding/contract.py:25
    // @arc4.abimethod(create="require")
    callsub create_campaign
    intc_1 // 1
    return


// smart_contracts.funding.contract.CrowdfundingContract.create_campaign(goal: uint64, deadline_timestamp: uint64, title: bytes) -> void:
create_campaign:
    // smart_contracts/funding/contract.py:25-31
    // @arc4.abimethod(create="require")
    // def create_campaign(
    //     self,
    //     goal: UInt64,
    //     deadline_timestamp: UInt64,
    //     title: arc4.String,
    // ) -> None:
    proto 3 0
    // smart_contracts/funding/contract.py:33
    // assert deadline_timestamp > Global.latest_timestamp
    frame_dig -2
    global LatestTimestamp
    >
    assert
    // smart_contracts/funding/contract.py:35
    // self.goal_amount.value = goal
    bytec_3 // "goal_amount"
    frame_dig -3
    app_global_put
    // smart_contracts/funding/contract.py:36
    // self.deadline.value = deadline_timestamp
    bytec 4 // "deadline"
    frame_dig -2
    app_global_put
    // smart_contracts/funding/contract.py:37
    // self.creator.value = Txn.sender.bytes
    bytec 5 // "creator"
    txn Sender
    app_global_put
    // smart_contracts/funding/contract.py:38
    // self.raised_amount.value = UInt64(0)
    bytec_0 // "raised_amount"
    intc_0 // 0
    app_global_put
    // smart_contracts/funding/contract.py:39
    // self.is_active.value = UInt64(1)
    bytec_1 // "is_active"
    intc_1 // 1
    app_global_put
    // smart_contracts/funding/contract.py:40
    // self.campaign_title.value = title.bytes
    pushbytes "campaign_title"
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.funding.contract.CrowdfundingContract.contribute() -> void:
contribute:
    // smart_contracts/funding/contract.py:45
    // assert self.is_active.value == UInt64(1)
    intc_0 // 0
    bytec_1 // "is_active"
    app_global_get_ex
    assert // check self.is_active exists
    intc_1 // 1
    ==
    assert
    // smart_contracts/funding/contract.py:46
    // assert Global.latest_timestamp < self.deadline.value
    global LatestTimestamp
    intc_0 // 0
    bytec 4 // "deadline"
    app_global_get_ex
    assert // check self.deadline exists
    <
    assert
    // smart_contracts/funding/contract.py:48-49
    // # Update contribution tracking
    // self.contribution[Txn.sender] += Txn.amount
    txn Sender
    dup
    intc_0 // 0
    bytec_2 // "contribution"
    app_local_get_ex
    assert // check self.contribution exists for account
    txn Amount
    +
    bytec_2 // "contribution"
    swap
    app_local_put
    // smart_contracts/funding/contract.py:50
    // self.raised_amount.value += Txn.amount
    intc_0 // 0
    bytec_0 // "raised_amount"
    app_global_get_ex
    assert // check self.raised_amount exists
    txn Amount
    +
    bytec_0 // "raised_amount"
    swap
    app_global_put
    retsub


// smart_contracts.funding.contract.CrowdfundingContract.withdraw_funds() -> void:
withdraw_funds:
    // smart_contracts/funding/contract.py:55
    // assert Txn.sender.bytes == self.creator.value
    txn Sender
    intc_0 // 0
    bytec 5 // "creator"
    app_global_get_ex
    assert // check self.creator exists
    ==
    assert
    // smart_contracts/funding/contract.py:56
    // assert self.raised_amount.value >= self.goal_amount.value
    intc_0 // 0
    bytec_0 // "raised_amount"
    app_global_get_ex
    assert // check self.raised_amount exists
    intc_0 // 0
    bytec_3 // "goal_amount"
    app_global_get_ex
    assert // check self.goal_amount exists
    >=
    assert
    // smart_contracts/funding/contract.py:57
    // assert self.is_active.value == UInt64(1)
    intc_0 // 0
    bytec_1 // "is_active"
    app_global_get_ex
    assert // check self.is_active exists
    intc_1 // 1
    ==
    assert
    // smart_contracts/funding/contract.py:59-60
    // # Mark campaign as completed
    // self.is_active.value = UInt64(0)
    bytec_1 // "is_active"
    intc_0 // 0
    app_global_put
    retsub


// smart_contracts.funding.contract.CrowdfundingContract.refund() -> void:
refund:
    // smart_contracts/funding/contract.py:65
    // assert Global.latest_timestamp >= self.deadline.value
    global LatestTimestamp
    intc_0 // 0
    bytec 4 // "deadline"
    app_global_get_ex
    assert // check self.deadline exists
    >=
    assert
    // smart_contracts/funding/contract.py:66
    // assert self.raised_amount.value < self.goal_amount.value
    intc_0 // 0
    bytec_0 // "raised_amount"
    app_global_get_ex
    assert // check self.raised_amount exists
    intc_0 // 0
    bytec_3 // "goal_amount"
    app_global_get_ex
    assert // check self.goal_amount exists
    <
    assert
    // smart_contracts/funding/contract.py:67
    // assert self.contribution[Txn.sender] > UInt64(0)
    txn Sender
    intc_0 // 0
    bytec_2 // "contribution"
    app_local_get_ex
    assert // check self.contribution exists for account
    assert
    // smart_contracts/funding/contract.py:69
    // contribution_amount = self.contribution[Txn.sender]
    txn Sender
    intc_0 // 0
    bytec_2 // "contribution"
    app_local_get_ex
    bury 1
    assert // check self.contribution exists for account
    // smart_contracts/funding/contract.py:70
    // self.contribution[Txn.sender] = UInt64(0)
    txn Sender
    bytec_2 // "contribution"
    intc_0 // 0
    app_local_put
    retsub


// smart_contracts.funding.contract.CrowdfundingContract.get_campaign_info() -> bytes:
get_campaign_info:
    // smart_contracts/funding/contract.py:76
    // arc4.UInt64(self.goal_amount.value),
    intc_0 // 0
    bytec_3 // "goal_amount"
    app_global_get_ex
    assert // check self.goal_amount exists
    itob
    // smart_contracts/funding/contract.py:77
    // arc4.UInt64(self.raised_amount.value),
    intc_0 // 0
    bytec_0 // "raised_amount"
    app_global_get_ex
    assert // check self.raised_amount exists
    itob
    // smart_contracts/funding/contract.py:78
    // arc4.UInt64(self.deadline.value),
    intc_0 // 0
    bytec 4 // "deadline"
    app_global_get_ex
    assert // check self.deadline exists
    itob
    // smart_contracts/funding/contract.py:79
    // arc4.Address(self.creator.value),
    intc_0 // 0
    bytec 5 // "creator"
    app_global_get_ex
    assert // check self.creator exists
    dup
    len
    pushint 32 // 32
    ==
    assert // Address length is 32 bytes
    // smart_contracts/funding/contract.py:80
    // arc4.UInt64(self.is_active.value)
    intc_0 // 0
    bytec_1 // "is_active"
    app_global_get_ex
    assert // check self.is_active exists
    itob
    // smart_contracts/funding/contract.py:75-81
    // return arc4.Tuple((
    //     arc4.UInt64(self.goal_amount.value),
    //     arc4.UInt64(self.raised_amount.value),
    //     arc4.UInt64(self.deadline.value),
    //     arc4.Address(self.creator.value),
    //     arc4.UInt64(self.is_active.value)
    // ))
    uncover 4
    uncover 4
    concat
    uncover 3
    concat
    uncover 2
    concat
    swap
    concat
    retsub
