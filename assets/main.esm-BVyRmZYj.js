var f=Object.defineProperty;var b=(i,e,n)=>e in i?f(i,e,{enumerable:!0,configurable:!0,writable:!0,value:n}):i[e]=n;var l=(i,e,n)=>b(i,typeof e!="symbol"?e+"":e,n);class h extends Error{constructor(n,d,s){super(n);l(this,"code");l(this,"data");this.name="SignTxnsError",this.code=d,this.data=s}}var E;(function(i){i[i.UNKNOWN=-1]="UNKNOWN",i[i.AUTH=1]="AUTH"})(E||(E={}));class m extends Error{constructor(n,d,s){super(n);l(this,"code");l(this,"data");this.name="SignDataError",this.code=d,this.data=s}}const p=100+window.screenX,v=100+window.screenY,g=`width=500,height=750,left=${p},top=${v}`,u="https://lute.app",k="kiaoohollfkjhikdifohdckeidckokjh";class x{constructor(e){l(this,"siteName");l(this,"forceWeb",!1);this.siteName=e||document.title||"Unknown site"}async isExtensionInstalled(){return await fetch(`chrome-extension://${k}/assets/icon-16.png`).then(()=>!0).catch(()=>!1)}connect(e){return new Promise(async(n,d)=>{const s=this.forceWeb?!1:await this.isExtensionInstalled();let r;s?window.dispatchEvent(new CustomEvent("lute-connect",{detail:{action:"connect",genesisID:e}})):r=open(`${u}/connect`,this.siteName,g);const o=s?"connect-response":"message";window.addEventListener(o,a);function a(c){if(!s&&c.origin!==u)return;const t=c.data||c.detail;switch(t.debug&&console.log("[Lute Debug]",t),t.action){case"ready":r==null||r.postMessage({action:"network",genesisID:e},"*");break;case"connect":window.removeEventListener(o,a),n(t.addrs);break;case"error":window.removeEventListener(o,a),d(new Error(t.message));break;case"close":window.removeEventListener(o,a),d(new Error("Operation Cancelled"));break}}})}signTxns(e){return new Promise(async(n,d)=>{const s=this.forceWeb?!1:await this.isExtensionInstalled();let r;s?window.dispatchEvent(new CustomEvent("lute-connect",{detail:{action:"sign",txns:e}})):r=open(`${u}/sign`,this.siteName,g);const o=s?"sign-txns-response":"message";window.addEventListener(o,a);function a(c){if(!s&&c.origin!==u)return;const t=c.data||c.detail;switch(t.debug&&console.log("[Lute Debug]",t),t.action){case"ready":r==null||r.postMessage({action:"sign",txns:e},"*");break;case"signed":window.removeEventListener(o,a),n(t.txns);break;case"error":window.removeEventListener(o,a),d(new h(t.message,t.code||4300));break;case"close":window.removeEventListener(o,a),d(new h("User Rejected Request",4100));break}}})}signData(e,n){return new Promise(async(d,s)=>{const r=this.forceWeb?!1:await this.isExtensionInstalled();let o;r?window.dispatchEvent(new CustomEvent("lute-connect",{detail:{action:"data",data:e,metadata:n}})):o=open(`${u}/auth`,this.siteName,g);const a=r?"sign-data-response":"message";window.addEventListener(a,c);function c(t){if(!r&&t.origin!==u)return;const w=t.data||t.detail;switch(w.debug&&console.log("[Lute Debug]",w),w.action){case"ready":o==null||o.postMessage({action:"data",data:e,metadata:n},"*");break;case"signed":window.removeEventListener(a,c),d(w.signerResponse);break;case"error":window.removeEventListener(a,c),s(new m(w.message,w.code||4300));break;case"close":window.removeEventListener(a,c),s(new m("User Rejected Request",4100));break}}})}}export{u as BASE_URL,k as EXT_ID,E as ScopeType,m as SignDataError,h as SignTxnsError,x as default};
